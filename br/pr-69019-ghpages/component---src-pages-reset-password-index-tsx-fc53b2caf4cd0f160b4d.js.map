{"version":3,"file":"component---src-pages-reset-password-index-tsx-fc53b2caf4cd0f160b4d.js","mappings":"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","sources":["webpack://deriv-com/./src/pages/reset-password/index.tsx","webpack://deriv-com/./src/common/validation.js"],"sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport { Formik, Form } from 'formik'\nimport Layout from 'components/layout/layout'\nimport { localize, WithIntl } from 'components/localization'\nimport { Container, SEO } from 'components/containers'\nimport { Header, Text } from 'components/elements'\nimport { Input, Button } from 'components/form'\nimport validation from 'common/validation'\nimport { trimSpaces } from 'common/utility'\nimport { BinarySocketBase } from 'common/websocket/socket_base'\nimport Login from 'common/login'\n\ntype EmailType = { email: string }\n\ntype ErrorType = Partial<EmailType>\n\nconst StyledContainer = styled(Container)`\n    text-align: center;\n    height: 100vh;\n    padding: auto 0;\n    justify-content: start;\n`\n\nconst ButtonContainer = styled.div`\n    margin-top: 2rem;\n`\n\nconst InputGroup = styled.div`\n    width: 40rem;\n    margin: 0 auto 3.4rem;\n`\n\nconst StyledButton = styled(Button)`\n    margin: 0.8rem 0.4rem;\n`\n\nconst resetValidation = (values: EmailType) => {\n    const errors: ErrorType = {}\n    const email = trimSpaces(values.email)\n    const email_error = validation.required(email) || validation.email(email)\n\n    if (email_error) {\n        errors.email = email_error\n    }\n\n    return errors\n}\n\nconst resetSubmission = (values: EmailType, actions) => {\n    const binary_socket = BinarySocketBase.init()\n\n    binary_socket.onopen = () => {\n        binary_socket.send(\n            JSON.stringify({ verify_email: trimSpaces(values.email), type: 'reset_password' }),\n        )\n    }\n    binary_socket.onmessage = (msg: { data: string }) => {\n        const response = JSON.parse(msg.data)\n        actions.setSubmitting(false)\n        if (response.error) {\n            actions.setStatus({\n                error: response.error.message,\n            })\n            return\n        }\n\n        actions.resetForm({ email: '' })\n        actions.setStatus({\n            success: localize(\n                'Please check your email and click on the link provided to reset your password.',\n            ),\n        })\n        binary_socket.close()\n    }\n}\n\nconst ResetPassword = () => {\n    const initialValues: EmailType = { email: '' }\n    return (\n        <Layout type=\"static\" margin_top=\"0\">\n            <SEO\n                title={localize('Reset password | Deriv')}\n                description={localize(\n                    'Forgot your Deriv password? Want to reset your password? Send us your email address and weâ€™ll email you the instructions.',\n                )}\n                no_index\n            />\n            <StyledContainer justify=\"center\" align=\"center\" direction=\"column\">\n                <Header as=\"h2\" type=\"page-title\" align=\"center\" mt=\"80px\">\n                    {localize('Reset password')}\n                </Header>\n                <Header\n                    as=\"h4\"\n                    type=\"sub-section-title\"\n                    align=\"center\"\n                    weight=\"500\"\n                    mt=\"0.5rem\"\n                    mb=\"3.8rem\"\n                >\n                    {localize(\"We'll email you instructions to reset your password.\")}\n                </Header>\n                <Formik\n                    initialValues={initialValues}\n                    initialStatus={{}}\n                    validate={resetValidation}\n                    onSubmit={resetSubmission}\n                >\n                    {({\n                        values,\n                        errors,\n                        handleChange,\n                        handleBlur,\n                        isSubmitting,\n                        resetForm,\n                        status,\n                    }) => (\n                        <Form noValidate>\n                            <InputGroup>\n                                <Input\n                                    id=\"dm-email-input\"\n                                    name=\"email\"\n                                    error={errors.email}\n                                    value={trimSpaces(values.email)}\n                                    handleError={resetForm}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    autoComplete=\"off\"\n                                    type=\"text\"\n                                    label={localize('Email')}\n                                    background=\"white\"\n                                    placeholder=\"example@email.com\"\n                                    data-lpignore=\"true\"\n                                    required\n                                />\n                            </InputGroup>\n                            <Text align=\"center\" color=\"red\">\n                                {status.error}\n                            </Text>\n                            <Text align=\"center\" color=\"green\">\n                                {status.success}\n                            </Text>\n                            <ButtonContainer>\n                                <StyledButton\n                                    id=\"dm-pass-reset-login-link\"\n                                    tertiary\n                                    onClick={Login.redirectToLogin}\n                                    type=\"button\"\n                                >\n                                    {localize('Return to log in')}\n                                </StyledButton>\n                                <StyledButton\n                                    id=\"dm-pass-reset-button\"\n                                    secondary=\"true\"\n                                    disabled={isSubmitting}\n                                    type=\"submit\"\n                                >\n                                    {localize('Reset my password')}\n                                </StyledButton>\n                            </ButtonContainer>\n                        </Form>\n                    )}\n                </Formik>\n            </StyledContainer>\n        </Layout>\n    )\n}\n\nexport default WithIntl()(ResetPassword)\n","import { localize } from 'components/localization'\n\nconst validation_regex = {\n    email: /^[^@]+@[^@]+\\.[^@.]{2,}$/,\n    url: /^[\\w|\\-|.]+$/,\n    alphabetic: /^[a-zA-Z]+$/,\n    number: /^\\d+$/,\n}\n\nconst validation = {\n    // Validation will return a string for error message\n    email: (input, message) => {\n        if (!validation_regex.email.test(input)) {\n            return message ? message : localize('Email is required')\n        } else {\n            return null\n        }\n    },\n    name: (input, message) => {\n        if (!input) {\n            return message ? message : localize('Name is required')\n        } else {\n            return null\n        }\n    },\n    required: (input, message) => {\n        if (!input) {\n            return message ? message : localize('This field is required')\n        } else {\n            return null\n        }\n    },\n    url: (input, message) => {\n        if (!validation_regex.url.test(input)) {\n            return message ? message : localize('Please enter a valid URL format')\n        } else {\n            return null\n        }\n    },\n    number: (input, message) => {\n        if (!validation_regex.number.test(input)) {\n            return message ? message : localize('Please enter a valid number')\n        } else {\n            return null\n        }\n    },\n    alphabetic: (input, message) => {\n        if (!validation_regex.alphabetic.test(input)) {\n            return message ? message : localize('Please enter only alphabetic characters')\n        } else {\n            return null\n        }\n    },\n}\n\nexport default validation\n"],"names":["StyledContainer","styled","Container","withConfig","ButtonContainer","InputGroup","StyledButton","Button","resetValidation","values","errors","email","trimSpaces","email_error","validation","resetSubmission","actions","binary_socket","BinarySocketBase","onopen","send","JSON","stringify","verify_email","type","onmessage","msg","response","parse","data","setSubmitting","error","setStatus","message","resetForm","success","localize","close","WithIntl","React","Layout","margin_top","SEO","title","description","no_index","justify","align","direction","Header","as","mt","weight","mb","Formik","initialValues","initialStatus","validate","onSubmit","handleChange","handleBlur","isSubmitting","status","Form","noValidate","Input","id","name","value","handleError","onChange","onBlur","autoComplete","label","background","placeholder","required","Text","color","tertiary","onClick","Login","secondary","disabled","validation_regex","url","alphabetic","number","input","test"],"sourceRoot":""}